// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import app "github.com/grupawp/tensorflow-deploy/app"
import context "context"
import mock "github.com/stretchr/testify/mock"

// ModulesMetadata is an autogenerated mock type for the ModulesMetadata type
type ModulesMetadata struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, module
func (_m *ModulesMetadata) Add(ctx context.Context, module app.ModuleData) (int64, error) {
	ret := _m.Called(ctx, module)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, app.ModuleData) int64); ok {
		r0 = rf(ctx, module)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, app.ModuleData) error); ok {
		r1 = rf(ctx, module)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *ModulesMetadata) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, parameters
func (_m *ModulesMetadata) Get(ctx context.Context, parameters app.QueryParameters) (*app.ModuleData, error) {
	ret := _m.Called(ctx, parameters)

	var r0 *app.ModuleData
	if rf, ok := ret.Get(0).(func(context.Context, app.QueryParameters) *app.ModuleData); ok {
		r0 = rf(ctx, parameters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*app.ModuleData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, app.QueryParameters) error); ok {
		r1 = rf(ctx, parameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, parameters
func (_m *ModulesMetadata) List(ctx context.Context, parameters app.QueryParameters) ([]*app.ModuleData, error) {
	ret := _m.Called(ctx, parameters)

	var r0 []*app.ModuleData
	if rf, ok := ret.Get(0).(func(context.Context, app.QueryParameters) []*app.ModuleData); ok {
		r0 = rf(ctx, parameters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*app.ModuleData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, app.QueryParameters) error); ok {
		r1 = rf(ctx, parameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NextVersion provides a mock function with given fields: ctx, parameters
func (_m *ModulesMetadata) NextVersion(ctx context.Context, parameters app.QueryParameters) (int64, error) {
	ret := _m.Called(ctx, parameters)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, app.QueryParameters) int64); ok {
		r0 = rf(ctx, parameters)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, app.QueryParameters) error); ok {
		r1 = rf(ctx, parameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
