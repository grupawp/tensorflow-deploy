// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import app "github.com/grupawp/tensorflow-deploy/app"
import context "context"
import mock "github.com/stretchr/testify/mock"

// ModelsConfig is an autogenerated mock type for the ModelsConfig type
type ModelsConfig struct {
	mock.Mock
}

// AddModel provides a mock function with given fields: ctx, modelID
func (_m *ModelsConfig) AddModel(ctx context.Context, modelID app.ModelID) error {
	ret := _m.Called(ctx, modelID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, app.ModelID) error); ok {
		r0 = rf(ctx, modelID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConfigFileStream provides a mock function with given fields: ctx, team, project
func (_m *ModelsConfig) ConfigFileStream(ctx context.Context, team string, project string) ([]byte, error) {
	ret := _m.Called(ctx, team, project)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []byte); ok {
		r0 = rf(ctx, team, project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, team, project)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DefaultLabel provides a mock function with given fields:
func (_m *ModelsConfig) DefaultLabel() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RemoveModel provides a mock function with given fields: ctx, id
func (_m *ModelsConfig) RemoveModel(ctx context.Context, id app.ModelID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, app.ModelID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveModelLabel provides a mock function with given fields: ctx, id
func (_m *ModelsConfig) RemoveModelLabel(ctx context.Context, id app.ModelID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, app.ModelID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLabel provides a mock function with given fields: ctx, id
func (_m *ModelsConfig) UpdateLabel(ctx context.Context, id app.ModelID) (int64, error) {
	ret := _m.Called(ctx, id)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, app.ModelID) int64); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, app.ModelID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
