// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import app "github.com/grupawp/tensorflow-deploy/app"
import context "context"
import mock "github.com/stretchr/testify/mock"

// ModelsMetadata is an autogenerated mock type for the ModelsMetadata type
type ModelsMetadata struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, model
func (_m *ModelsMetadata) Add(ctx context.Context, model app.ModelData) (int64, error) {
	ret := _m.Called(ctx, model)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, app.ModelData) int64); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, app.ModelData) error); ok {
		r1 = rf(ctx, model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeLabel provides a mock function with given fields: ctx, model
func (_m *ModelsMetadata) ChangeLabel(ctx context.Context, model app.ModelData) error {
	ret := _m.Called(ctx, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, app.ModelData) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *ModelsMetadata) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, parameters
func (_m *ModelsMetadata) Get(ctx context.Context, parameters app.QueryParameters) (*app.ModelData, error) {
	ret := _m.Called(ctx, parameters)

	var r0 *app.ModelData
	if rf, ok := ret.Get(0).(func(context.Context, app.QueryParameters) *app.ModelData); ok {
		r0 = rf(ctx, parameters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*app.ModelData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, app.QueryParameters) error); ok {
		r1 = rf(ctx, parameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsStatusPending provides a mock function with given fields: ctx, servableID
func (_m *ModelsMetadata) IsStatusPending(ctx context.Context, servableID app.ServableID) (bool, error) {
	ret := _m.Called(ctx, servableID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, app.ServableID) bool); ok {
		r0 = rf(ctx, servableID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, app.ServableID) error); ok {
		r1 = rf(ctx, servableID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, parameters
func (_m *ModelsMetadata) List(ctx context.Context, parameters app.QueryParameters) ([]*app.ModelData, error) {
	ret := _m.Called(ctx, parameters)

	var r0 []*app.ModelData
	if rf, ok := ret.Get(0).(func(context.Context, app.QueryParameters) []*app.ModelData); ok {
		r0 = rf(ctx, parameters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*app.ModelData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, app.QueryParameters) error); ok {
		r1 = rf(ctx, parameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUniqueTeamProject provides a mock function with given fields: ctx
func (_m *ModelsMetadata) ListUniqueTeamProject(ctx context.Context) ([]*app.ServableID, error) {
	ret := _m.Called(ctx)

	var r0 []*app.ServableID
	if rf, ok := ret.Get(0).(func(context.Context) []*app.ServableID); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*app.ServableID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NextVersion provides a mock function with given fields: ctx, parameters
func (_m *ModelsMetadata) NextVersion(ctx context.Context, parameters app.QueryParameters) (int64, error) {
	ret := _m.Called(ctx, parameters)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, app.QueryParameters) int64); ok {
		r0 = rf(ctx, parameters)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, app.QueryParameters) error); ok {
		r1 = rf(ctx, parameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveLabel provides a mock function with given fields: ctx, model
func (_m *ModelsMetadata) RemoveLabel(ctx context.Context, model app.ModelData) error {
	ret := _m.Called(ctx, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, app.ModelData) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStatus provides a mock function with given fields: ctx, id, status
func (_m *ModelsMetadata) UpdateStatus(ctx context.Context, id int64, status string) error {
	ret := _m.Called(ctx, id, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
